#!/bin/bash

set -e

# Postinst script for pamir-ai-keyinput-dkms
# This script handles the installation of DKMS modules and device tree overlays

PACKAGE_NAME="pamir-ai-keyinput-dkms"
DKMS_MODULE_NAME="pamir-ai-keyinput"
PACKAGE_VERSION="1.0.1"
DTBO_DEST="/boot/firmware/overlays"
DTBO_FILE="pamir-ai-keyinput.dtbo"
CONFIG_FILE="/boot/firmware/config.txt"
ALTERNATIVE_CONFIG="/boot/config.txt"

# Logging functions
log_info() {
	echo "[INFO] $1" >&2
}

log_warn() {
	echo "[WARNING] $1" >&2
}

log_error() {
	echo "[ERROR] $1" >&2
}

# Function to find the correct config file
find_config_file() {
	if [ -f "$CONFIG_FILE" ]; then
		echo "$CONFIG_FILE"
	elif [ -f "$ALTERNATIVE_CONFIG" ]; then
		echo "$ALTERNATIVE_CONFIG"
	else
		return 1
	fi
}

# Function to compile and install device tree overlay
install_device_tree_overlay() {
	local dts_source="/usr/src/$DKMS_MODULE_NAME-$PACKAGE_VERSION/pamir-ai-keyinput-overlay.dts"

	if [ ! -f "$dts_source" ]; then
		log_warn "Device tree overlay source not found at $dts_source"
		return 1
	fi

	log_info "Compiling device tree overlay..."

	# Check if device-tree-compiler is available
	if ! command -v dtc >/dev/null 2>&1; then
		log_warn "device-tree-compiler not found, attempting to install..."
		if command -v apt-get >/dev/null 2>&1; then
			apt-get update >/dev/null 2>&1 || true
			if apt-get install -y device-tree-compiler >/dev/null 2>&1; then
				log_info "device-tree-compiler installed successfully"
			else
				log_error "Failed to install device-tree-compiler"
				log_error "Please install manually: sudo apt-get install device-tree-compiler"
				return 1
			fi
		else
			log_error "Package manager not available, cannot install device-tree-compiler"
			return 1
		fi
	fi

	# Create temporary directory for compilation
	local temp_dir
	temp_dir=$(mktemp -d)

	# Ensure cleanup on exit
	trap 'rm -rf "$temp_dir"' EXIT INT TERM

	# Change to temporary directory
	cd "$temp_dir" || {
		log_error "Failed to change to temporary directory"
		return 1
	}

	# Compile the overlay
	if dtc -@ -I dts -O dtb -o "$DTBO_FILE" "$dts_source" 2>/dev/null; then
		log_info "Device tree overlay compiled successfully"

		# Create destination directory
		mkdir -p "$DTBO_DEST" || {
			log_error "Failed to create overlay destination directory"
			return 1
		}

		# Copy to destination
		if cp "$DTBO_FILE" "$DTBO_DEST/"; then
			log_info "Device tree overlay installed to $DTBO_DEST/$DTBO_FILE"
		else
			log_error "Failed to copy device tree overlay"
			return 1
		fi
	else
		log_error "Failed to compile device tree overlay"
		return 1
	fi

	return 0
}

# Function to update boot configuration
update_boot_config() {
	local config_file

	if ! config_file=$(find_config_file); then
		log_warn "Boot configuration file not found"
		log_warn "Checked: $CONFIG_FILE, $ALTERNATIVE_CONFIG"
		log_warn "Please manually add 'dtoverlay=pamir-ai-keyinput' to your boot configuration"
		return 1
	fi

	log_info "Found boot configuration file: $config_file"

	# Check if overlay is already present
	if grep -q "dtoverlay=pamir-ai-keyinput" "$config_file"; then
		log_info "Overlay already present in boot configuration"
		return 0
	fi

	# Add overlay to config
	log_info "Adding overlay to boot configuration..."

	# Create backup
	local backup_file="${config_file}.backup.$(date +%Y%m%d_%H%M%S)"
	if cp "$config_file" "$backup_file"; then
		log_info "Created backup: $backup_file"
	else
		log_warn "Failed to create backup of config file"
	fi

	# Add the overlay configuration
	{
		echo ""
		echo "# Pamir AI Key Input (added by $PACKAGE_NAME)"
		echo "dtoverlay=pamir-ai-keyinput"
	} >>"$config_file"

	log_info "Overlay added to boot configuration"
	return 0
}

# Function to handle DKMS operations
handle_dkms_operations() {
	local kernel_version
	kernel_version=$(uname -r)

	log_info "Handling DKMS operations for kernel $kernel_version..."

	# Check if kernel headers are available
	local kernel_headers_dir="/lib/modules/$kernel_version/build"

	if [ ! -d "$kernel_headers_dir" ]; then
		log_warn "Kernel headers not found at $kernel_headers_dir"
		log_warn "Attempting to install kernel headers..."

		# Try to install kernel headers
		if apt-get update >/dev/null 2>&1 && apt-get install -y linux-headers-$kernel_version >/dev/null 2>&1; then
			log_info "Kernel headers installed successfully"
		else
			log_warn "Could not install kernel headers for $kernel_version"
			log_warn "Trying Raspberry Pi specific kernel headers..."
			if apt-get install -y raspberrypi-kernel-headers >/dev/null 2>&1; then
				log_info "Raspberry Pi kernel headers installed"
			else
				log_error "Failed to install kernel headers"
				log_error "Please install kernel headers manually:"
				log_error "  sudo apt install linux-headers-\$(uname -r)"
				log_error "  sudo apt install raspberrypi-kernel-headers  # For Raspberry Pi"
				return 1
			fi
		fi
	fi

	# Check if DKMS module is already added
	if dkms status pamir-ai-keyinput/1.0.1 >/dev/null 2>&1; then
		log_info "DKMS module already exists"
	else
		log_info "Adding DKMS module..."
		if ! dkms add pamir-ai-keyinput/1.0.1 2>/tmp/dkms_add.log; then
			log_error "Failed to add DKMS module"
			log_error "DKMS add log:"
			cat /tmp/dkms_add.log 2>/dev/null || true
			return 1
		fi
		log_info "DKMS module added successfully"
	fi

	# Build DKMS module
	log_info "Building DKMS module for kernel $kernel_version..."
	if dkms build pamir-ai-keyinput/1.0.1 -k $kernel_version 2>/tmp/dkms_build.log; then
		log_info "DKMS module built successfully"

		# Install DKMS module
		log_info "Installing DKMS module..."
		if dkms install pamir-ai-keyinput/1.0.1 -k $kernel_version 2>/tmp/dkms_install.log; then
			log_info "DKMS module installed successfully"

			# Verify installation
			if dkms status pamir-ai-keyinput/1.0.1 | grep -q "installed"; then
				log_info "DKMS module installation verified"
				return 0
			else
				log_warn "DKMS module installation could not be verified"
				return 1
			fi
		else
			log_error "DKMS module installation failed"
			log_error "Install log:"
			cat /tmp/dkms_install.log 2>/dev/null || true
			return 1
		fi
	else
		log_error "DKMS module build failed"
		log_error "Build log:"
		cat /tmp/dkms_build.log 2>/dev/null || true
		log_error "Common solutions:"
		log_error "  1. Install kernel headers: sudo apt install linux-headers-\$(uname -r)"
		log_error "  2. For Raspberry Pi: sudo apt install raspberrypi-kernel-headers"
		log_error "  3. Update system: sudo apt update && sudo apt upgrade"
		return 1
	fi
}

# Function to display post-installation information
display_post_install_info() {
	log_info "Installation complete!"
	echo ""
	echo "===================================================="
	echo "  Pamir AI Key Input DKMS Module Installation"
	echo "===================================================="
	echo ""
	echo "The key input module has been installed successfully."
	echo ""
	echo "To activate the key input driver:"
	echo "  1. Reboot your system (recommended), or"
	echo "  2. Load module manually:"
	echo "     sudo modprobe pamir-ai-keyinput"
	echo ""
	echo "Test the installation:"
	echo "  evtest  # Select the Pamir AI Key Input device"
	echo "  cat /proc/bus/input/devices | grep -A 10 'Pamir AI Key Input'"
	echo ""
	echo "Character device for UART communication:"
	echo "  /dev/pamir-keyinput"
	echo ""
	echo "For more information:"
	echo "  cat /usr/share/doc/$PACKAGE_NAME/README.md"
	echo ""
}

# Main installation logic
case "$1" in
configure)
	log_info "Configuring $PACKAGE_NAME..."

	# Install device tree overlay
	if install_device_tree_overlay; then
		log_info "Device tree overlay installation completed"
	else
		log_warn "Device tree overlay installation failed"
		log_warn "The module may still work without the overlay"
	fi

	# Update boot configuration
	if update_boot_config; then
		log_info "Boot configuration updated"
	else
		log_warn "Boot configuration update failed"
	fi

	# Handle DKMS operations
	if handle_dkms_operations; then
		log_info "DKMS operations completed successfully"
	else
		log_warn "DKMS operations failed"
		log_warn "You may need to manually build the modules:"
		log_warn "  sudo dkms build pamir-ai-keyinput/1.0.1"
		log_warn "  sudo dkms install pamir-ai-keyinput/1.0.1"
	fi

	# Display post-installation information
	display_post_install_info
	;;

abort-upgrade | abort-remove | abort-deconfigure)
	log_info "Aborting $PACKAGE_NAME configuration due to $1"
	;;

*)
	log_error "postinst called with unknown argument '$1'"
	exit 1
	;;
esac

# Let debhelper handle DKMS operations

exit 0
